#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrreprt
\begin_preamble
%% Flexibles Seitenlayout
\usepackage[automark]{scrlayer-scrpage}

\RequirePackage{scrlfile}
\ReplacePackage{scrpage2}{scrlayer-scrpage}

%% Mehrspaltenlayout ermöglichen
\usepackage{multicol}

%% Unterstützung für Farben
\usepackage{color}

\usepackage{tabularx}
\usepackage{booktabs}
\usepackage{caption}
\usepackage{geometry}
\usepackage{array}
\usepackage{enumitem}
\usepackage{babel}
\usepackage{makecell}
\usepackage{svg}

%% Schönere Tabellen
\usepackage{booktabs, longtable}
\usepackage{graphicx}

%% Für Url
\usepackage{url}

%% Schönerer Blocksatz


%% Mehr Platz zwischen Überschrift und Tabelle
\newcommand{\@ldtable}{}
\let\@ldtable\table
\renewcommand{\table}{ %
    \setlength{\@tempdima}{\abovecaptionskip} %
    \setlength{\abovecaptionskip}{\belowcaptionskip} %
    \setlength{\belowcaptionskip}{\@tempdima} %
    \@ldtable %
}


%% Verschiedene Symbole und Zeichen wie (c), €
\usepackage{textcomp}

%% Fehlerkorrektur für Marginalien
\usepackage{fixltx2e, mparhack}

%% Deutsche Kurzfassung und englisches Abstract auf eine Seite
\renewenvironment{abstract}{
    \@beginparpenalty\@lowpenalty
        \begin{center}
            \normalfont\sectfont\nobreak\abstractname
        \end{center}
    \@endparpenalty\@M
}{
    \par
}

%% Alle Seiten vor dem Inhaltsverzeichnis sind römisch nummeriert
\pagenumbering{roman}
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{
    \begin{spacing}{1.1}
    \myTOC
    \end{spacing}
    \clearpage
    \pagenumbering{arabic}
}

%% Kopfzeile um Logo ergänzen
\clearscrheadfoot
\ohead{\\\headmark}
\ihead{\includegraphics[scale=0.25]{asset/thb-logos/TH-Logo-only-gray.png}}%\pagemark}
\ofoot[\pagemark]{\pagemark}

%% Randnotizen anpassen
\setlength{\marginparwidth}{22mm}
\let \oldmarginpar = \marginpar
\renewcommand{\marginpar}[1]{%
    \-\oldmarginpar[\raggedleft\footnotesize\sf #1]%
        {\raggedright\footnotesize\sf #1%
    }}

%% Zitate am Kapitelanfang
\usepackage{epigraph}
\setlength{\epigraphwidth}{9cm}

%% Leere seite ohne Nummerierung hinzufügen mit \myemptypage
\usepackage{afterpage}
\newcommand\myemptypage{
    \null
    \thispagestyle{empty}
    \addtocounter{page}{-1}
    \newpage
    }

\newcommand\tstrut{\rule{0pt}{2.4ex}}
\newcommand\bstrut{\rule[-1.0ex]{0pt}{0pt}}
\newcommand*\rot{\rotatebox{90}}

%% Auskommentieren, wenn keine Listings im Dokument verwendet werden!
%% Anpassen, wenn eine andere Programmiersprache als C# verwendet wird.
%% Code-Block-Formatierung
%%\lstdefinestyle{default}{ %
%%    backgroundcolor={\color[rgb]{0.95,0.95,0.95}}, %
%%    basicstyle={\small\ttfamily}, %
%%    breaklines=true, %
%%    frame=l, %
%%    language={[Sharp]C}, %
%%    lineskip=-0.1pt, %
%%    numbers=left, %
%%    rulecolor={\color[rgb]{0.5,0.5,0.5}}, %
%%    xleftmargin={0.75cm}, %
%%    xrightmargin={0cm} %
%%}

%% Unter unter Abschnitte in Inhaltverzeichnis zeigen:
\setcounter{tocdepth}{3}
\end_preamble
\options pointlessnumbers, abstraction, headsepline
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype true
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 11
\spacing other 1.4
\use_hyperref true
\pdf_title "Konzeption eines JavaFX-Frameworks zur Erstellung von Gantt-Diagrammen - Anforderungen, Architektur und Implementierung eines Prototyps"
\pdf_author "Dallysse Laure Djouhou Tamdjo"
\pdf_subject "Masterarbeit"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 2
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\branch steve
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\headheight 1cm
\headsep 0.666cm
\footskip 1cm
\secnumdepth 4
\tocdepth 4
\paragraph_separation skip
\defskip medskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "backgroundcolor={\color[gray]{0.9}}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
titlepage
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename asset/thb-logos/THB Logo.png
	width 5cm

\end_inset

 
\end_layout

\begin_layout Standard
\noindent
\align center

\family sans
\series bold
Fachbereich Wirtschaft
\family default
\series default

\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\series bold
MASTERARBEIT
\end_layout

\begin_layout Standard
\noindent
\align center

\family sans
\series bold
\size largest
Konzeption eines JavaFX-Frameworks zur Erstellung von Gantt-Diagrammen -
 Anforderungen, Architektur und Implementierung eines Prototyps
\family default
\series default
\size default

\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
Vorgelegt von:
\begin_inset Newline newline
\end_inset


\series bold
Dallysse Laure Djouhou Tamdjo
\series default

\begin_inset VSpace 0.5cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
am: 
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
zur
\begin_inset Newline newline
\end_inset

 Erlangung des akademischen Grades 
\begin_inset Newline newline
\end_inset


\series bold
\size larger
Master of Science
\series default
\size default
 
\begin_inset Newline newline
\end_inset


\series bold
(M.sc.)
\series default

\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
Erstbetreuerin: 
\begin_inset Newline newline
\end_inset


\series bold
Prof.
 Dr.
 Winfried Pfister 
\begin_inset Newline newline
\end_inset

(Technische Hochschule Brandenburg)
\end_layout

\begin_layout Standard
\noindent
\align center
Zweitbetreuerin: 
\begin_inset Newline newline
\end_inset


\series bold
Prof.
 Dr.
 Kai Jander 
\begin_inset Newline newline
\end_inset

(Technische Hochschule Brandenburg)
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
myemptypage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset VSpace 14cm*
\end_inset


\end_layout

\begin_layout Standard
\noindent
Ich möchte mich bei meinen Betreuerinnen, Prof.
 Dr.
 Winfried Pfister und Prof.
 Dr.
 Kai Jander, die mich bei der Erstellung dieser Masterarbeit unglaublich
 unterstützt haben.
 Ihre Geduld mit mir, Ihre Vorschläge und Ihre Verfügbarkeit waren mir eine
 große Hilfe.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Anschließend möchte ich Gott und all den liebevollen Menschen danken, die
 mich ermutigt haben.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Am Ende widme ich diese Bachelorarbeit meinen Töchtern, in denen ich die
 Kraft und Energie finde, mein Studium zu absolvieren, um ihnen ein besseres
 Leben zu gewährleisten, und meinem Mann für seine Geduld und seine Anwesenheit.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
myemptypage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
titlepage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
leere Seite nach dem Titelblatt
\end_layout

\begin_layout Plain Layout
dann Aufgabenstellung
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
pagestyle{scrheadings}    %Kopfzeile ein
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
selectlanguage{ngerman}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagestyle{scrheadings}    %Kopfzeile ein
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Einführung
\end_layout

\begin_layout Section
Motivation und Aufgabenstellung
\end_layout

\begin_layout Standard
Die vorliegende Masterarbeit befasst sich mit dem Entwurf und der Erstellung
 eines JavaFX-Framework-Prototyps.
\end_layout

\begin_layout Standard
Frameworks sind vorgefertigte Programmierstrukturen, die die Entwicklung
 der eigentlichen Anwendung beschleunigen sollen und in der Regel fertige
 Lösungen für typische Aufgaben anbieten, in unserem Fall für den Entwurf
 eines Gantt-Diagramms.
 Jeder Softwareentwickler hat wahrscheinlich schon einmal Frameworks verwendet,
 manchmal ohne es zu wissen.
 Diese werden häufig bei der Entwicklung von Anwendungen mit grafischen
 Benutzeroberflächen (sog.
 GUI-Frameworks: z.
 B.
 Angular
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://angular.io/guide/what-is-angular
\end_layout

\end_inset

, JavaFX) eingesetzt und bieten dem Softwareentwickler Komponenten und Prozesse
 zur visuellen Darstellung von Daten.
 Frameworks unterscheiden sich somit von Klassenbibliotheken, da sie nicht
 nur eine Sammlung einzelner Komponenten sind, sondern auch Strukturen und
 Prozesse anbieten.
\end_layout

\begin_layout Standard
Das Gantt-Diagramm wird in der Terminplanung und im Projektmanagement verwendet
 und ermöglicht es, die verschiedenen Aufgaben, aus denen sich ein Projekt
 zusammensetzt, zeitlich zu visualisieren 
\begin_inset CommandInset citation
LatexCommand cite
key "Gantt.com2022"
literal "false"

\end_inset

.
 Es dient zwei Zwecken, nämlich der optimalen Planung und der Kommunikation
 über den erstellten Zeitplan und die damit verbundenen Entscheidungen.
 Das Diagramm ermöglicht es, die Termine für die Fertigstellung eines Projekts
 zu bestimmen; die bei bestimmten Aufgaben vorhandenen Spielräume zu identifizie
ren und auf einen Blick zu sehen, wie weit die Arbeiten bereits fortgeschritten
 oder im Rückstand sind.
 Die Methode besteht darin, die zu erledigenden Aufgaben im Gantt-Diagramm
 in der durch die Priorität festgelegten Reihenfolge und unter Berücksichtigung
 der noch verfügbaren Ressourcen zu platzieren.
 In einem Gantt-Diagramm stellt man auf der Abszisse die in Monaten, Wochen
 oder Tagen ausgedrückten Zeiteinheiten und auf der Ordinate die verschiedenen
 Arbeitsplätze oder die einzelnen Aufgaben dar 
\begin_inset CommandInset citation
LatexCommand cite
key "RapportGratuit2022"
literal "false"

\end_inset

.
 Das hier behandelte Problem entstand also aus dem Wunsch, die bei der Erstellun
g von Gantt-Diagrammen immer wieder auftretenden Probleme schnell und effizient
 mit einem Open-Source-Mittel lösen zu können.
 Das hier vorgestellte Projekt geht über die Funktionen einer herkömmlichen
 Programmbibliothek hinaus und bietet darüber hinaus vordefinierte Prozesse
 und Problemlösungen.
 Das daraus resultierende Framework definiert somit einen Rahmen, in dem
 Gantt-Diagramme erstellt werden können.
\end_layout

\begin_layout Standard
Ziel dieser Masterarbeit ist es, ein Konzept zu entwickeln, das definiert,
 welche Funktionen bei der Erstellung eines Gantt-Diagramms mit einem JavaFX-Fra
mework vorhanden sind, welche nicht, aber dennoch relevant sind, was der
 Benutzer von JavaFX-Frameworks bei der Erstellung eines Gantt-Diagramms
 erwarten kann und schließlich die Implementierung eines Prototyps eines
 Open-Source-JavaFX-Frameworks für die Erstellung von Gantt-Diagrammen.
 
\end_layout

\begin_layout Standard
GUI
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "GUI"
description "Graphical User Interface"
literal "false"

\end_inset


\end_layout

\begin_layout Section
Aufbau des Dokuments
\end_layout

\begin_layout Standard
Die Arbeit ist in zwei Teile gegliedert.
 Im ersten theoretischen, konzeptionellen und technischen Teil werden die
 Grundlagen, Modelle und Konzepte von Gantt Diagramm und der Mehrwert von
 Framework insbesondere des JavaFX-Frameworks erläutert.
 
\color red
Die grundlegenden Technologien und Prinzipien werden in allgemeiner Form
 behandelt.
\end_layout

\begin_layout Standard
Im zweiten Teil geht es um die Implementierung des Prototyps des Frameworks
 zur Erstellung von Gantt-Diagrammen, deren allgemeinen bzw.
 speziellen Anforderungen, sowie Architekturentwurf und Realisierung mit
 JavaFX.
 
\color red
Die im ersten Teil entwickelten Konzepte sollen hier eine praktische und
 beispielhafte Anwendung finden.
\end_layout

\begin_layout Standard
Grundlegende Kenntnisse in Java und JavaFX sind erforderlich, um die Implementie
rung und die hier vorgestellte und die Codefragmente zu verstehen, zusätzlich
 kommt JavaFX 19 zum Einsatz.
 Als Programmiersprache wird Java verwendet.
 
\end_layout

\begin_layout Chapter
Grundlagen und Begriffe
\end_layout

\begin_layout Section
Framework
\end_layout

\begin_layout Subsection
Was sind Frameworks? Definitionsversuch und Merkmale 
\end_layout

\begin_layout Standard
Eine allgemeingültige Definition eines Frameworks ist schwierig zu finden,
 da ein breites Spektrum der Nutzung möglich ist.
 Wörtlich bedeutet ein Framework "Gerüst".
 
\color red
Der Begriff Framework wird häufig in verschiedenen Kontexten verwendet,
 ist aber in der Computerprogrammierung ein echter Werkzeugkasten der Neuzeit.
 Es handelt sich dabei um einen Satz struktureller Softwarekomponenten,
 der es Entwicklern ermöglicht, Webanwendungen effizienter zu gestalten,
 indem er eine fertige und wiederverwendbare Architektur und Softwarekomponenten
 bereitstellt (Grandjean, 2019).
\end_layout

\begin_layout Standard

\color red
Bewertung auslassen
\end_layout

\begin_layout Standard

\color red
Die Implementierung eines Frameworks ermöglicht es insbesondere, Know-how
 zu kapitalisieren, ohne "das Rad neu zu erfinden", die Produktivität der
 Entwickler zu steigern, sobald sie sich mit dem Framework vertraut gemacht
 haben, die Entwicklung von Anwendungen zu vereinheitlichen, indem die Wiederver
wendung zuverlässiger Komponenten sichergestellt wird, und somit die Wartung,
 insbesondere die evolutive Wartung von Anwendungen, zu erleichtern.
 
\end_layout

\begin_layout Standard
Frameworks sind in vielfältigen Formen zu finden, die alle oder einige der
 folgenden Elemente enthalten können:
\end_layout

\begin_layout Itemize

\color red
Eine Reihe von Klassen, die in der Regel in Form von Bibliotheken zusammengefass
t sind, um ausgefeilte Dienste anzubieten.
 
\end_layout

\begin_layout Itemize
Einen auf Design Patterns basierenden Gestaltungsrahmen, um ein Anwendungsskelet
t ganz oder teilweise anzubieten.
 
\end_layout

\begin_layout Itemize
Empfehlungen für die Implementierung und Anwendungsbeispiele.
 
\end_layout

\begin_layout Itemize

\color red
Standards für die Entwicklung.
 
\end_layout

\begin_layout Itemize

\color red
Einheitweise 21 min 
\end_layout

\begin_layout Itemize
Werkzeuge, die die Umsetzung erleichtern.
 
\end_layout

\begin_layout Subsection
Zusammenfassung
\end_layout

\begin_layout Standard
Frameworks helfen Entwicklern bei der Erstellung von Sofware Produkten.
 Sie stellen eine Infrastruktur bereit, die die Low-Level-Details bereits
 gelöst hat, sodass sich der Entwickler auf die Details des spezifischen
 Projekts konzentrieren kann, anstatt sich mit wiederkehrenden technischen
 Aufgaben wie der grundlegenden Anwendungsarchitektur, dem Datenzugriff,
 der Internationalisierung, der Ereignisprotokollierung (Logging), der Sicherhei
t (Authentifizierung und Rollenmanagement) oder sogar der Konfiguration
 der Anwendung zu beschäftigen.
 Der Entwickler muss auch weniger Code schreiben.
 Und weniger Code bedeutet weniger Fehleranfälligkeit und weniger Entwicklungsze
it.
\end_layout

\begin_layout Standard
Auch wenn es anfangs mühsam ist, Frameworks zu erlernen, gewinnen sie mit
 zunehmender Vertrautheit an Wert.
 Zukünftige Projekte werden schneller und einfacher.
 
\end_layout

\begin_layout Section
Rich Internet Applications
\end_layout

\begin_layout Standard
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "RIAs"
description "Rich Internet Applications"
literal "false"

\end_inset

 (RIAs) sind Webanwendungen, die Daten verwenden, die sowohl vom Server
 als auch vom Client verarbeitet werden können.
 Außerdem findet der Datenaustausch asynchron statt, sodass der Client reaktions
fähig bleibt, während er Teile der Benutzeroberfläche ständig neu berechnet
 oder aktualisiert, (Koch, 2009).
 Für die Users bieten RIAs ein ähnliches Aussehen und Gefühl wie Desktop-Anwendu
ngen.
 RIAs zeichnen sich im Wesentlichen durch eine Vielzahl von interaktiven
 Bedienelementen, die Möglichkeit, die Anwendung online oder offline zu
 nutzen, aus.
\end_layout

\begin_layout Standard
Die Entwickler von Webseiten wollten die Vorteile klassischer Desktop-Anwendunge
n, mit denen des Internets kombinieren.
 RIAs von herkömmlichen Webanwendungen unterscheiden (s.
 Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Einordnung-der-RIA-Technologie"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename asset/bilder/Einordnung der RIA-Technologie.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Einordnung der RIA-Technologie 
\begin_inset CommandInset label
LatexCommand label
name "fig:Einordnung-der-RIA-Technologie"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
RIA-Frameworks
\end_layout

\begin_layout Standard
Neben JavaFX, dem hier ein eigenes Kapitel gewidmet ist, sind folgende alternati
ve Plattformen und Frameworks zu nennen:
\end_layout

\begin_layout Standard
HTML
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "HTML"
description "HyperText Markup Language "
literal "false"

\end_inset

5 ist die neueste Entwicklung der RIA-Bewegung.
 HTML5 ist im Wesentlichen das Ergebnis der Verschmelzung des Besten aus
 HTML4, JavaScript, CSS
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "CSS"
description "Cascading Style Sheets"
literal "false"

\end_inset

, JavaScript-Bibliotheken und Flash in einer einzigen Spezifikation, die
 das API
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "API"
description "Application Programming Interface"
literal "false"

\end_inset

-Modell nutzt.
 Es ist eine offene Technologie, was bedeutet, dass es kein einziges Führungsgre
mium wie Adobe für Flash oder Microsoft für Silverlight geben wird.
 Derzeit wird HTML5 von allen wichtigen Browsern unterstützt.
 
\end_layout

\begin_layout Standard
Angular
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://angular.io/guide/what-is-angular
\end_layout

\end_inset

 ist eine Entwicklungsplattform, die auf JavaScript aufbaut.
 Angular umfasst ein komponentenbasiertes Framework für die Erstellung skalierba
rer Webanwendungen, eine reichhaltige Sammlung von Bibliotheken, die eine
 Vielzahl von Funktionen abdecken, wie z.
 B.
 Routing, Formularverwaltung, Client-Server-Kommunikation, und eine Reihe
 von Entwicklungswerkzeugen, die Ihnen bei der Entwicklung, dem Aufbau,
 dem Testen und der Aktualisierung Ihres Codes helfen.
 Die neueste Version von Angular ist Version 15.
 In Version 15 unterstützt angular keine TypeScript-Versionen mehr, die
 älter als 4.8 sind.
 Derzeit werden die Node.js-Versionen 14.20.x, 16.13.x und 18.10.x unterstützt.
 
\end_layout

\begin_layout Subsection
Model View Controller (MVC)
\end_layout

\begin_layout Standard
MVC
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "MVC"
description "Model View Controller "
literal "false"

\end_inset

basiert auf drei Komponenten namens Model, View und Controller und in Abbildung
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:mvc"
plural "false"
caps "false"
noprefix "false"

\end_inset

 dargestellt.
 Die Vorlage wird hauptsächlich zur Verwaltung von Daten in einer Anwendung
 verwendet.
 Man kann sich die Sicht als die im Modell enthaltenen Daten vorstellen,
 die der Benutzer auf dem Bildschirm sieht.
 Die Ansicht stellt sicher, dass das Modell die aktuellen Informationen
 des Benutzers anzeigt.
 Wenn ein Benutzer die Daten in der Anwendung ändern möchte, informiert
 View eine andere Komponente namens Controller, die die Aktualisierung selbst
 nach Modell vornimmt.
 Die Controller sind das, was sie zusammenhält und die Koordination zwischen
 dem Modell und die View verwaltet.
 Durch die in der Anmeldung vorgenommene Aufteilung der Zuständigkeiten
 wird die Verwaltung der Anmeldung erleichtert.
 Wenn eine Änderung an der Schnittstelle vorgenommen werden muss, wird in
 der Tat nur die Ansicht geändert, wenn eine Änderung computerbezogen ist,
 müssen nur der Controller und das Modell geändert werden.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
mvc
\begin_inset CommandInset label
LatexCommand label
name "fig:mvc"

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "doc2022"
literal "false"

\end_inset


\end_layout

\end_inset


\begin_inset Graphics
	filename asset/bilder/mvc.png
	lyxscale 60

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Tools zur Erstellung eines Gantt-Diagramm
\end_layout

\begin_layout Standard
Gantt-Diagramme ermöglichen eine übersichtliche Darstellung der zeitlichen
 Merkmale eines Prozesses.
 Es bestehen einige Java-basierte Tools zur Erstellung von Gantt-Diagrammen:
 SwiftGantt, GanttProject und ProjectLibre sind Open-Source-Tools.
 Darüber hinaus gibt es auch kostenpflichtige Tools wie FlexGanttFX.
 FlexGanttFX ist das JavaFX-basierte Gantt-Diagramm-Framework, das derzeit
 für Java verfügbar ist.
\end_layout

\begin_layout Standard
FlexGanttFX
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://flexgantt.atlassian.net/wiki/spaces/FFXMAN/overview?homepageId=491528
\end_layout

\end_inset

 ist ein sehr leistungsfähiges und komplexes benutzerdefiniertes Steuerelement
 für JavaFX-Anwendungen.
 FlexGanttFX ermöglicht das Bearbeiten oder Ändern von Daten, so dass die
 Benutzer Planungs- und Terminierungsvorgänge durchführen können.
 FlexGanttFX enthält keine Geschäftslogik, d.
 h.
 es liegt an der Anwendung, richtig zu reagieren, wenn der Benutzer eine
 Änderung vorgenommen hat.
 Jedes der vier folgenden Pakete, aus denen FlexGanttFX besteht, enthält
 eigene Klassen
\begin_inset CommandInset citation
LatexCommand cite
key "Lemmermann2016"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
List von FlexGanttFX-Paketen
\begin_inset CommandInset label
LatexCommand label
name "tab:List-von-FlexGanttFX-Paketen"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "Lemmermann2016"
literal "false"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="12cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FlexGanttFX-Pakete
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inhalt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
com.flexganttfx.core
\end_layout

\end_inset
</cell>
<cell mroffset="0.5cm" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enthält verschiedene Utility-Klassen und Lizenzunterstützung.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
com.flexganttfx.extra
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enthält zusätzliche Klassen, wie z.
 B.
 eine GanttChartToolBar und eine GanttChartStatusBar.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
com.flexganttfx.view
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enthält die Visualisierungsklassen.
 Wie z.
 B.
 GanttChart
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
com.flexganttfx.model
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enthält alle Klassen, die mit dem Datenmodell verbunden sind (Aktivitäten,
 Strecken, Depots)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
GanttProjekt ist eine Open-Source-Initiative, die in Java und Koltin programmier
t wurde.
 Ihr Ziel ist es, ein Programm zu erstellen, das Diagramme erstellen kann,
 die die kurz-, mittel- und langfristige Verteilung der Aufgaben eines Projekts
 darstellen.
 Ein Diagramm muss nicht unbedingt innerhalb der Geschäftswelt anwendbar
 sein.
 Sie können ein Diagramm erstellen, die Sie für die Vorbereitung auf eine
 Prüfung, den Bau eines Hauses oder die Erledigung einer bestimmten Aufgabe
 benötigen.
 Das Programm ermöglicht es Ihnen, Aktivitäten nach Personen oder "Ressourcen"
 zu verteilen, und es kann auch zur Verwaltung von Gruppenprojekten verwendet
 werden.
 Mit dem Gantt-Projekt können Sie die Entwicklung von Aufgaben testen und
 eine Kopie ihres Status bezüglich des Zeitpunkts ihrer Ausführung speichern,
 um sie später nach ihrer Fertigstellung vergleichen zu können.
 GanttProjekt läuft auf den folgenden Betriebssystemen: Windows, Linux und
 MacOS.
 Die aktuelle Version 3.2.3240 wurde veröffentlicht am 31.
 März 2022
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://www.ganttproject.biz/
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
SwiftGantt ist eine OpenSource Java Swing Gantt Chart Komponente, die es
 Ihnen ermöglicht, den Projektplan als Gantt-Diagramm anzuzeigen, entweder
 als Client- oder als Server-Anwendung.
 Sie ist flexibel, kompatibel und einfach zu benutzen.
 SwiftGantt ist eine freie Software, die in der Liste der Programme Components
 & Libraries veröffentlicht wurde und zur Kategorie Entwicklung gehört.
 Die Tabelle 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:List-der-SwiftGantt"
plural "false"
caps "false"
noprefix "false"

\end_inset

 gibt einen allgemeinen Überblick über die wichtigsten Merkmale der SwiftGantt.
 SwiftGantt ist mit den folgenden Betriebssystemen kompatibel: Linux, Mac,
 Windows.
 Die neueste Version, die von seinem Entwickler veröffentlicht wurde, ist
 0.4.0
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://swiftgantt.sourceforge.net/en/index.html
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
List der SwiftGantt Funktionen
\begin_inset CommandInset label
LatexCommand label
name "tab:List-der-SwiftGantt"

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "SoftSea.com2011"
literal "false"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="12cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SwiftGantt Funktionen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Zeiteinheit
\end_layout

\end_inset
</cell>
<cell mroffset="0.5cm" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Verschiedene Arten von Zeiteinheiten in SwiftGantt: Stunde, Tag, Woche,
 Monat, Jahr.
 Flexible Einstellungen für die Dauer der Arbeitstage in jeder Woche und
 die Dauer der Arbeitsstunden in jedem Tag.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anpassen der Farben
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
man kann die Farben der Elemente im Gantt-Diagramm festlegen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anpassen der Größe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Die Breite der Zeiteinheit, die Höhe der Zeile, die Höhe der Aufgabenleiste
 und die Höhe des Fortschrittsbalkens lassen sich individuell anpassen.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Exportieren von Bildern
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Das in SwiftGantt verteilte Gantt-Diagramm kann als Bilddateien in den Formaten
 .png und .jpg exportiert werden.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mehrsprachigkeit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SwiftGantt unterstützt mehrere Sprachen, darunter Englisch, vereinfachtes
 Chinesisch, traditionelles Chinesisch, Japanisch, Französisch, Spanisch,
 Italienisch und Portugiesisch.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
JavaFX
\end_layout

\begin_layout Standard
JavaFX soll Swing in Java-Anwendungen als Framework für die grafische Benutzerob
erfläche ersetzen.
 JavaFX stellt seine eigenen Komponenten bereit und ist nicht vom Betriebssystem
 abhängig.
 JavaFX unterstützt verschiedene Betriebssysteme, darunter Windows, Linux
 und Mac OS.

\color brown
 Die Plattform als Ganzes ermöglicht es, Anwendungen auf verschiedenen virtuelle
n Plattformen zu entwerfen, zu erstellen, zu testen und zu debuggen, bevor
 sie eingesetzt werden, um ihre Kompatibilität zu gewährleisten
\color inherit
.
 Die Skriptsprache von JavaFX eignet sich für Komplexe Grafiken und reichhaltige
 Benutzeroberflächen, da sie die Prism-Grafikpipeline zum Rendern verwendet.
 Sie enthält reichhaltige Grafikbibliotheken, mit denen sich Anwendungen
 mit grafischer Benutzeroberfläche (GUI) erstellen lassen.
\end_layout

\begin_layout Standard
JavaFX ist eine Java-Bibliothek, die zur Entwicklung von Desktop-Anwendungen
 sowie von Rich Internet Applikation (RIAs) verwendet wird.
 Mit JavaFX erstellte Anwendungen können auf verschiedenen Plattformen laufen,
 darunter das Web, Mobiltelefone und Desktops.
 Ein Vorteil dieses Frameworks ist die weit verbreitete Java-Umgebung.
 
\color brown
Der Reichtum seiner Bibliothek und seine Flexibilität haben JavaFX zur idealen
 Lösung für die Erstellung von Anwendungen mit möglichst wenig Aufwand gemacht.

\color inherit
 Neben den archivierten Funktionen stellt JavaFX den Benutzern auch Schnittstell
en und Vorlagen zur Verfügung, mit denen sie statische Grafiken, Animationen
 und komplexe Benutzeroberflächensteuerungen kombinieren können.
 JavaFX ist auch mit mehreren Technologien kompatibel, die auf der Java
 Virtual Machine (JVM
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "JVM"
description "Java Virtual Machine"
literal "false"

\end_inset

) basieren, wie z.
 B.
 Java, Groovy,kotlin und JRuby.
 JavaFX bietet jedoch auch volle Funktionalität für Benutzer, die nur JavaFX
 ohne weitere Frameworks verwenden möchten.
\end_layout

\begin_layout Standard
JavaFX wurde von Chris Oliver entwickelt.
 Ursprünglich hieß das Projekt Form Follows Functions (F3).
 Es sollte reichhaltigere Funktionen für die Entwicklung von GUI-Anwendungen
 bieten.
 Später erwarb Sun Micro-systems das F3-Projekt unter dem Namen JavaFX im
 Juni 2005 
\begin_inset CommandInset citation
LatexCommand cite
key "Jaiswal2011"
literal "false"

\end_inset

.
 Sun Micro-systems kündigte es 2007 auf der W3-Konferenz offiziell an.
 Im Oktober 2008 wurde JavaFX 1.0 veröffentlicht.
 Im Jahr 2009 übernahm die ORACLE corporation Sun Micro-Systems und veröffentlic
hte JavaFX 1.2.
 Derzeit ist die letzte Version von JavaFX JavaFX 19, die am 19.
 September 2022 veröffentlicht wurde.
 Neuere Versionen von JavaFX ermöglichen die Verwendung von JavaFX neben
 HTML5- und JavaScript-Frameworks anstelle von Plug-ins, die von den meisten
 Geräten und Browsern nicht mehr unterstützt werden.
 
\end_layout

\begin_layout Subsection
Schlüsselfunktionen von JavaFX
\end_layout

\begin_layout Standard
Die Tabelle 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Schlüsselfeatures-von-JavaFX"
plural "false"
caps "false"
noprefix "false"

\end_inset

 beschreibt die Hauptfunktionen, die in JavaFX 8 und späteren Versionen
 enthalten sind.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Schlüsselfeatures von JavaFX
\begin_inset CommandInset label
LatexCommand label
name "tab:Schlüsselfeatures-von-JavaFX"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="12cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Merkmale
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java API
\end_layout

\end_inset
</cell>
<cell mroffset="0.5cm" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java API ist eine Java-Bibliothek, die aus Klassen und Schnittstellen besteht,
 die in nativem Java-Code geschrieben sind.
 Die APIs sind als benutzerfreundliche Alternative zu den Sprachen der Java
 Virtual Maschine (Java VM), wie JRuby und Scala, gedacht.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FXML und Scene Builder 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FXML und Scene Builder ist eine deklarative, XML-basierte Auszeichnungssprache
 zum Aufbau einer Benutzeroberfläche für JavaFX-Anwendungen.
 Ein Designer kann in FXML codieren oder JavaFX Scene Builder verwenden,
 um die grafische Benutzeroberfläche (GUI) interaktiv zu gestalten.
 Scene Builder erzeugt ein FXML-Markup, das auf eine IDE portiert werden
 kann, wo ein Entwickler die Geschäftslogik hinzufügen kann.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WebView
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WebView Eine Webkomponente, die die WebKitHTML-Technologie nutzt, um die
 Integration von Webseiten in eine JavaFX-Anwendung zu ermöglichen.
 In WebView ausgeführtes JavaScript kann Java-APIs aufrufen, und Java-APIs
 können in WebView ausgeführtes JavaScript aufrufen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interoperabilität mit Swing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bestehende Swing-Anwendungen können mit neuen JavaFX-Funktionen aktualisiert
 werden, z.
 B.
 mit der Wiedergabe von Rich Graphik Media und eingebetteten Webinhalten.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integrierte UI- und CSS-Steuerelemente
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JavaFX bietet alle wichtigen UI-Steuerelemente, die für die Entwicklung
 einer vollständigen Anwendung erforderlich sind.
 Die Komponenten lassen sich mit Standard-Webtechnologien wie CSS beeinflussen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Canvas API
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none" width="12cm">
\begin_inset Text

\begin_layout Plain Layout
Canvas API ermöglicht das direkte Zeichnen in einem Bereich der JavaFX-Szene,
 der aus einem grafischen Element (Knoten) besteht.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unterstützung von Multitouch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JavaFX unterstützt Multitouch-Operationen, je nach den Möglichkeiten der
 zugrunde liegenden Plattform.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reichhaltiger API-Satz JavaFX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bietet einen umfangreichen API-Satz zur Entwicklung von GUI-Anwendungen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integrierte Grafikbibliothek
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Für 2D- und 3D-Grafiken steht ein integrierter Satz von Klassen zur Verfügung.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hardwarebeschleunigte Grafikpipeline
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JavaFX-Grafiken basieren auf der Grafik-Rendering-Pipeline (Prism).
 JavaFX bietet flüssige Grafiken, die von Prism schnell gerendert werden,
 wenn es mit einer unterstützten Grafikkarte oder Grafikprozessoreinheit
 (GPU) verwendet wird.
 Wenn ein System nicht über einen der empfohlenen, von JavaFX unterstützten
 Grafikprozessoren verfügt, verwendet Prism standardmäßig das Java 2D-Software-S
tack.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hochleistungsfähige Medien-Engine
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Die Medienpipeline unterstützt die Wiedergabe von Web-Medieninhalten.
 Sie bietet einen stabilen Medienrahmen mit niedriger Latenz, der auf dem
 GStreamer-Medienrahmen basiert.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Modell für die Bereitstellung von eigenständigen Anwendungen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color brown
Eigenständige Anwendungspakete enthalten alle Anwendungsressourcen und eine
 private Kopie der Java- und JavaFX-Laufzeitmaschinen.
 Sie werden als native Installationspakete verteilt und bieten die gleiche
 Installations- und Starterfahrung wie native Anwendungen für dieses Betriebssys
tem.
 Lesen Sie das Dokument Bereitstellung von JavaFX-Anwendungen.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
JavaFX Architektur
\end_layout

\begin_layout Standard
JavaFX hat verschiedene integrierte Komponenten, die miteinander verbunden
 sind.
 Es enthält einen reichhaltigen Satz von APIs, die mehr als ausreichend
 sind, um reichhaltige Internetanwendungen zu entwickeln, die auf vielen
 Plattformen einheitlich funktionieren.
 Die Abbildung zeigt die Architektur der JavaFX-API, sie gibt eine deutliche
 Übersicht über die Komponenten, die die JavaFX-API unterstützen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Übersicht der JavaFX Architektur
\begin_inset CommandInset label
LatexCommand label
name "fig:Übersicht-der-JavaFX"

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "tutorialspoint2011"
literal "false"

\end_inset


\end_layout

\end_inset


\begin_inset Graphics
	filename asset/bilder/JavaFX Architecture.png
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
JavaFX API
\end_layout

\begin_layout Standard
JavaFX bietet eine umfassende API mit einem reichen Satz an Klassen und
 Schnittstellen, um GUI-Anwendungen mit reichhaltiger Grafik zu bauen.
 Wichtige Pakete dieser API sind:
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Tabelle 3.2: Die Liste der Pakete der JavaFX-API
\begin_inset CommandInset label
LatexCommand label
name "tab:Tabelle-3.2:-Die"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="12cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Merkmale
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
javafx.animation
\end_layout

\end_inset
</cell>
<cell mroffset="0.5cm" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enthält Klassen, mit denen JavaFX Knoten übergangsbasierte Animationen wie
 Füllen, Blenden, Drehen, Skalieren und Translation hinzugefügt werden können.
 Die Klasse Timeline stellt eine Animationszeitleiste dar.
 Auf der Zeitleiste können Keyframes hinzugefügt werden, zwischen denen
 die Animationsfunktionen interpoliert werden.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
javafx.application
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enthält eine Reihe von Klassen, die für den Lebenszyklus von JavaFX-Anwendungen
 zuständig sind.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
javafx.css 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enthält Klassen, mit denen JavaFX-GUI-Anwendungen ein CSS-ähnlicher Stil
 hinzugefügt werden kann.
 Es gibt mehrere verschiedene Methoden, um einen CSS-Stil auf eine JavaFX-Kompon
ente anzuwenden.
 Diese Methoden lauten: JavaFX default CSS stylesheet, Scene specific CSS
 stylesheet, Parent specific CSS stylesheet und Component style property
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
javafx.event
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enthält Klassen und Schnittstellen zur Ausgabe und Verwaltung von JavaFX-Ereigni
ssen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
javafx.geometry
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enthält Klassen zum Definieren von 2D-Objekten und zum Ausführen von Operationen
 mit ihnen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
javafx.scene
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none" width="12cm">
\begin_inset Text

\begin_layout Plain Layout
dieses Paket enthält Klassen und Schnittstellen zur Unterstützung des Scene
 Graph.
 Darüber hinaus stellt es auch Unterpakete wie z.
 B.
 javafx.scene.canvas, javafx.scene.chart, javafx.scene.control, javafx.scene.effect,
 javafx.scene.image, javafx.scene.input, javafx.scene.layout, javafx.scene.media,
 javafx.scene.paint, javafx.scene.shape, javafx.scene.text, javafx.scene.transform,
 javafx.scene.web zur Verfügung.
 Die JavaFX-Scene enthält alle visuellen JavaFX-GUI-Komponenten in JavaFX
 Scene graph.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Scene Graph
\end_layout

\begin_layout Standard
In JavaFX wurden GUI-Anwendungen mithilfe eines Scene Graph codiert.
 Ein Scene Graph ist der Ausgangspunkt für den Aufbau der GUI-Anwendung.
 Er enthält die Primitive der Anwendung (GUI), die als Knoten bezeichnet
 werden.
\end_layout

\begin_layout Standard
Ein Knoten ist ein visuelles und grafisches Objekt, das Folgendes umfassen
 kann Ein geometrische (grafische) Objekte (2D und 3D) wie z.B.
 Kreis, Rechteck, Polygon, ein Steuerelemente für Benutzeroberflächen wie
 Schaltflächen, Kontrollkästchen, Auswahlboxen, Textfelder.
 Sowie Container (Layoutbereiche) wie z.
 B.
 Randbereich, Rasterbereich, Flussbereich und Medienelemente wie Audio-,
 Video- und Bildobjekte.
\end_layout

\begin_layout Standard
Im Allgemeinen bildet eine Sammlung von Knoten einen Scene Graph.
 Alle diese Knoten sind in einer hierarchischen Ordnung angeordnet.
 
\end_layout

\begin_layout Standard
Jeder Knoten im Scene Graph hat nur ein Elternteil, und der Knoten, der
 kein Elternteil hat, wird Root Node genannt.
 In ähnlicher Weise hat jeder Knoten ein oder mehrere Kinder, und der Knoten
 ohne Kinder wird Leaf Node genannt; ein Knoten mit Kindern wird Branch
 Node genannt.
\end_layout

\begin_layout Standard
Eine Knoteninstanz kann nur einmal zu einem Scene Graph hinzugefügt werden.
 Knoten in einem Scene Graph können Effekte, Deckkraft, Transformationen,
 Ereignis Behandler und anwendungsspezifische Zustände haben.
 
\end_layout

\begin_layout Subsection
Graphics Engine
\end_layout

\begin_layout Standard
Die JavaFX-Grafik-Engine liefert die grafische Unterstützung für die Grafikkompo
nente der Szene.
 Graphics Engine unterstützt in der Regel 2D- und 3D-Grafiken.
 Sie sorgt auch für das Software-Rendering, wenn die auf dem System vorhandene
 Grafikhardware kein hardwarebeschleunigtes Rendering unterstützen kann.
\end_layout

\begin_layout Standard
Die beiden Grafikbeschleunigungs-Pipelines von JavaFX sind Prism und Quantum
 Tool Kit.
\end_layout

\begin_layout Standard
Prism ist ein hochleistungsfähiges Hardwarebeschleunigungsmedium für Grafiken,
 das das Rendern von 2D- und 3D-Grafiken durchführen kann.
 Prism implementiert je nach Plattform verschiedene Möglichkeiten, Grafiken
 zu rendern.
\end_layout

\begin_layout Standard
Quantum Tool Kit wird verwendet, um Prism und glass windowing toolkit zu
 verknüpfen und sie für die oberen Schichten 
\color brown
des Stapels 
\color inherit
verfügbar zu machen.
 
\end_layout

\begin_layout Standard
Glass Windowing Tool kit ist auf der untersten Ebene des JavaFX-Grafikstapels
 vorhanden.
 Sie kann als plattformabhängige Schicht betrachtet werden, die als Schnittstell
e zwischen der JavaFX-Plattform und dem nativen Betriebssystem fungiert.
 Sie ist für die Bereitstellung von Betriebssystemdiensten wie die Verwaltung
 von Fenstern, Zeitgebern, Ereigniswarteschlangen und Oberflächen zuständig.
\end_layout

\begin_layout Standard
Web-View ist eine Webbrowser-Engine, die verwendet wird, um HTML-Inhalte
 in eine JavaFX- Scene Graph einzubetten.
 Sie unterstützt HTML5, CSS, JavaScript, DOM und SVG.
\end_layout

\begin_layout Standard
Medien-Engine bietet Werkzeuge zur Erstellung von Multimedia-Anwendungen,
 die die Wiedergabe von Medien im Desktopfenster oder auf einer Webseite
 auf unterstützten Plattformen ermöglichen.
 Die Medien-Engine von JavaFX basiert auf einer Open-Source-Engine, die
 als G Streamer bekannt ist und die Wiedergabe von Video- und Audioinhalten
 unterstützt.
 Das Paket javafx.scene.media enthält alle Klassen und Schnittstellen, die
 JavaFX-Anwendungen mit Medienfunktionen ausstatten können.
 
\end_layout

\begin_layout Subsection
JavaFX Anwendung Struktur
\end_layout

\begin_layout Standard
In diesem Teil werden wir die Struktur einer JavaFX-Anwendung im Detail
 besprechen, wie man eine JavaFX-Anwendung erstellt.
 Im Allgemeinen besteht eine JavaFX-Anwendung aus drei hierarchischen Hauptkompo
nenten, nämlich Stage, Scene und Node, wie in der Abbildung 
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:JavaFX-Anwendung-Struktur"
plural "false"
caps "false"
noprefix "false"

\end_inset

 dargestellt.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
JavaFX Anwendung Struktur
\begin_inset CommandInset label
LatexCommand label
name "fig:JavaFX-Anwendung-Struktur"

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "tutorialspoint2011a"
literal "false"

\end_inset


\end_layout

\end_inset


\begin_inset Graphics
	filename asset/bilder/javafx_application_structure.jpeg
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eine technische Beschreibung von Scene Graph und Nodes wurde in Kapitel
 3.2.2 gegeben.
 
\end_layout

\begin_layout Subsection
Stage 
\end_layout

\begin_layout Standard
Eine Stage ist der Hauptcontainer und der Einstiegspunkt in die Anwendung.
 Sie stellt das Hauptfenster dar und das erstellte Stage-Objekt wird als
 Argument an die Methode start() der Klasse Applikation übergeben.
 Wenn eine JavaFX-Anwendung startet, erzeugt sie ein Root-Stage-Objekt,
 das an die Methode start(Stage primaryStage) der Root-Klasse der JavaFX-Anwendu
ng übergeben wird.
 Dieses Stage-Objekt stellt das Primärfenster Ihrer JavaFX-Anwendung dar.
 Für ein Stage sind mehrere Operationen möglich.
 Eine Stage kann erstellt und angezeigt werden, man kann ihr eine Scene
 und einen Titel zuweisen, ihr eine Position, eine Breite und eine Höhe
 geben.
 Eine JavaFX- Stage kann zu einer anderen Stage gehören.
 Stage kann zum Vollbildmodus wechseln.
 Es ist auch möglich, die Modalität des Fensters einer JavaFX Stage festzulegen.
 Die Modalität der Stage bestimmt, ob das Fenster, das die Stage darstellt,
 andere Fenster blockiert, die von derselben JavaFX-Anwendung geöffnet werden.
 Es gibt drei Modalitätsmodi.
 Die Modalitätsmodi Modality.APPLICATION_MODAL und Modality.WINDOW_MODAL sind
 nützlich für Stage-Objekte, die Fenster darstellen, die als "Assistenten"
 oder "Dialoge" fungieren und die Anwendung oder das Fenster blockieren
 sollen, bis der Benutzer den Prozess des Assistenten oder des Dialogs beendet.
 Die Modalität Modality.NONE ist nützlich für Stage-Objekte, die Fenster
 darstellen, die nebeneinander existieren können, wie verschiedene Browserfenste
r in einer Browseranwendung.
 Ein JavaFX-Stage kann verschiedene Styles haben.
 Die zur Verfügung stehenden Styles sind: 
\end_layout

\begin_layout Itemize
Eine decorated Stage ist ein Standardfenster mit OS-Dekorationen (Titelleiste
 und Schaltflächen Minimieren / Maximieren / Schließen) und einem weißen
 Hintergrund.
 
\end_layout

\begin_layout Itemize
Eine undecorated Stage ist ein Standardfenster ohne OS-Dekorationen, aber
 mit einem weißen Hintergrund.
 
\end_layout

\begin_layout Itemize
Eine transparente Stage ist ein nicht dekoriertes Fenster mit einem transparente
n Hintergrund.
 
\end_layout

\begin_layout Itemize
Eine unified Stage ist wie eine dekorierte Stage, außer dass es keinen Rand
 zwischen dem dekorativen Bereich und dem Bereich mit dem Hauptinhalt gibt.
 
\end_layout

\begin_layout Itemize

\color brown
Eine Utility Stage ist ein dekoriertes Fenster, aber mit minimaler Dekoration.
\end_layout

\begin_layout Standard

\color brown
Die JavaFX-Stage kann einige Ereignisse ausgeben, die abgehört werden können.
 Diese Stage Ereignisse sind die folgenden: Close Stage Event Listener,
 Hiding Stage Event Listener, Hidden Stage Event Listener, Showing Stage
 Event Listener, Shown Stage Event Listener.
\end_layout

\begin_layout Standard
Es ist auch möglich, auf einer JavaFX-Stage auf Tastaturereignisse zu hören.
 Auf diese Weise kann man alle Tastaturereignisse auffangen, die eintreten,
 wenn die Stage den Fokus hat.
 
\end_layout

\begin_layout Subsection
Scene
\end_layout

\begin_layout Standard
Die Scene ist ein Container für den visuellen Inhalt der Szene.
 Die Szene enthält UI-Elemente wie Bildansichten, Schaltflächen, Raster
 und TextBoxen.
 Die Klasse Javafx.scene.Scene des Pakets javafx.scene stellt alle Methoden
 zur Manipulation eines Scene-Objekts zur Verfügung.
 Eine Scene kann erstellt werden, indem das Objekt der Klasse Scene erzeugt
 und das Layout-Objekt an den Konstruktor der Klasse Scene übergeben wird.
 
\end_layout

\begin_layout Subsection
Entwicklungsumgebungen und SDKs
\end_layout

\begin_layout Standard
Wie bei vielen Programmiersprachen oder Frameworks in der Softwareentwicklung
 ist eine Entwicklungsumgebung (IDE) nicht unbedingt notwendig, wird aber
 in der Regel von der Mehrheit der Softwareentwickler aus Gründen der Effizienz
 eingesetzt, da sie wiederkehrende Aufgaben und Funktionen übernimmt, die
 den Entwicklungsalltag erleichtern.
 Für JavaFX im Allgemeinen sind Eclipse, IntelliJ IDEA, NetBeans und Visual
 Studio Code weit verbreitete IDEs, die die Produktivität von Programmierern
 erheblich steigert.
 
\end_layout

\begin_layout Standard
Um eine JavaFX-Anwendung zu implementieren, müssen je nach verwendeter IDE
 zusätzliche Komponenten installiert werden.
 Die folgenden Komponenten werden für jede IDE benötigt: 
\end_layout

\begin_layout Itemize
Die Installation eines JDK: JavaFX 19 erfordert eine JDK-Version, die größer
 als JDK 11 ist.
 Für unseren Prototypen wird JDK 16 verwenden.
 
\end_layout

\begin_layout Itemize
Der optionale JavaFX Scene Builder Tools (JavaFX Scene Builder wird in Kapitel
 3.5 genauer behandelt) für unser Prototyp wird Scene Builder version 19
 verwenden.
 
\end_layout

\begin_layout Subsection
JavaFX Scene Builder und FXML
\end_layout

\begin_layout Standard
JavaFX Scene Builder ist ein Werkzeug zum Erstellen von visuellen Benutzeroberfl
ächen, mit dem Benutzer schnell Benutzeroberflächen von JavaFX-Anwendungen
 entwerfen können, ohne zu codieren.
 Die Benutzer können Komponenten der Benutzeroberfläche per Drag-and-Drop
 in einen Arbeitsbereich ziehen, ihre Eigenschaften ändern, Stylesheets
 anwenden, und der FXML-Code des von ihnen erstellten Layouts wird automatisch
 im Hintergrund generiert.
 Das Ergebnis ist eine FXML-Datei, die dann mit einem Java-Projekt kombiniert
 werden kann, indem die Benutzeroberfläche mit der Logik der Anwendung verknüpft
 wird.
 JavaFX Scene Builder hat folgende Funktionen:
\end_layout

\begin_layout Itemize

\color brown
UI Layout Tool Mit Scene Builder können Sie JavaFX-Benutzeroberflächensteuerelem
ente, Grafiken, Formen und Container einfach layouten, um schnell Prototypen
 von Benutzeroberflächen zu erstellen.
 
\end_layout

\begin_layout Itemize
FXML Visual Editor Scene Builder erzeugt FXML, eine XML-basierte Auszeichnungssp
rache, mit der Benutzer die Benutzeroberfläche einer Anwendung getrennt
 von der Anwendungslogik definieren können.
 Diese Datei kann auch geöffnet und bearbeitet und anschließend mit Scene
 Builder revitalisiert werden.
 
\end_layout

\begin_layout Itemize
Integrated Developer Workflow Scene Builder kann in Kombination mit jeder
 Java-IDE verwendet werden, ist aber enger mit der NetBeans-IDE integriert.
 Im Rahmen dieser Arbeit wird Visual Studio Code verwenden, das ebenfalls
 eine gute Integration von Scene Builder bietet.
 Die Benutzeroberfläche wird daher direkt mit dem Quellcode verknüpft, der
 die Ereignisse und Aktionen, die auf jedes Element angewendet werden, durch
 einen einfachen Prozess verwaltet: die Anwendung in Eclipse ausführen,
 und jede Änderung, die in Eclipse an FXML vorgenommen wird, spiegelt sich
 auch im Scene Builder-Projekt wider.
 
\end_layout

\begin_layout Itemize
Preview Your Work Zu jedem Zeitpunkt während der Projekterstellung kann
 man sich eine Vorschau ansehen, wie die Benutzeroberfläche nach dem Einsatz
 tatsächlich aussieht.
 
\end_layout

\begin_layout Itemize
Cross Platform, Self Contained Scene Builder basiert auf JavaFX und wird
 von Windows, Mac OS X und Linux unterstützt.
 Es ist eine vollwertige JavaFX-Desktop-Anwendung.
 Scene Builder ist wie eine eigenständige Anwendung, was bedeutet, dass
 es mit einer eigenen privaten Kopie der JRE ausgeliefert wird.
 
\end_layout

\begin_layout Itemize

\color brown
CSS-Support für die in Scene Builder verfügbaren Komponenten ist es möglich,
 das Aussehen mithilfe von Stylesheets auszuwählen.
 Wählen Sie dazu einfach eine GUI-Komponente aus und verweisen Sie im Eigenschaf
ten-Panel auf die CSS-Datei Ihrer Wahl.
 Mit dem CSS-Parser können Sie nachvollziehen, wie sich bestimmte CSS-Regeln
 auf das Aussehen einer JavaFX-Komponente auswirken.
\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:Aufbau-eines-Prototyps"
plural "false"
caps "false"
noprefix "false"

\end_inset

 zeigt ein Beispiel für das Aussehen von Scene Builder bei der Erstellung
 einer grafischen Benutzeroberfläche.
 Oben links befinden sich Komponenten wie bspw.
 Button, Chart, TableView, die der Benutzer verwenden kann.
 Unten links sind die Komponenten, die wir ausgewählt haben, nach dem gewählten
 Layout sortiert.
 Das folgende Layout ist ein BorderPane mit einem Top, einem Left, einem
 Center, einem Right und einem Bottom.
 In Top haben wir eine HBox, die zwei Schaltflächen enthält.
 In Left befindet sich ein TableView, in Cernter ein BarChart.
 In Right und Bottom gibt es nichts.
 Im Left-Bereich der Scene-Builder-Oberfläche können die Eigenschaften,
 das Layout und der Code jeder verwendeten Komponente angepasst werden.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Überblick eines Prototyps in Scene Builder
\begin_inset CommandInset label
LatexCommand label
name "fig:Aufbau-eines-Prototyps"

\end_inset


\end_layout

\end_inset


\begin_inset Graphics
	filename asset/bilder/SceneBuilder Prototype.png

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Beispiel 3.2 ist das gültige FXML-Dokument, der Scene Builder erstellten
 Prototypen generiert wurde.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Von Eclipse erzeugter FXML-Code des Prototyps (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:Aufbau-eines-Prototyps"
plural "false"
caps "false"
noprefix "false"

\end_inset

) in Scene Builder.
 
\end_layout

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset listings
lstparams "language=HTML,numbers=left,basicstyle={\rmfamily},breaklines=true,tabsize=4,comment={[l]{//}},commentstyle={\color{purple}\ttfamily},identifierstyle={\color{black}},keywords={&quot;global&quot;, &quot;rule_files&quot;, &quot;scrape_configs&quot;},keywordstyle={\color{blue}\bfseries},morecomment={[s]{/*}{*/}},ndkeywords={&quot;job_name&quot;, &quot;targets&quot;},ndkeywordstyle={\color{darkgray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily}"
inline false
status open

\begin_layout Plain Layout

<?xml version="1.0" encoding="UTF-8"?>
\end_layout

\begin_layout Plain Layout

<?import javafx.scene.chart.BarChart?> <?import javafx.scene.chart.CategoryAxis?>
 <?import javafx.scene.chart.NumberAxis?> <?import javafx.scene.control.Button?>
 <?import javafx.scene.control.TableColumn?> <?import javafx.scene.control.TableView?>
 <?import javafx.scene.layout.BorderPane?> <?import javafx.scene.layout.HBox?>
\end_layout

\begin_layout Plain Layout

<BorderPane xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1
" fx:controller="application.GanttChartController">    <center>       <BarChart
 prefHeight="513.0" prefWidth="541.0" BorderPane.alignment="CENTER">      
   <xAxis>           <NumberAxis side="TOP" tickLabelFill="#573737" /> 
        </xAxis>         <yAxis>           <CategoryAxis side="LEFT" />
         </yAxis>       </BarChart>    </center>    <left>       <TableView
 prefHeight="200.0" prefWidth="200.0" BorderPane.alignment="CENTER">      
   <columns>           <TableColumn prefWidth="75.0" text="C1" />       
    <TableColumn prefWidth="75.0" text="C2" />         </columns>       </TableVi
ew>    </left>    <top>       <HBox prefHeight="100.0" prefWidth="200.0" BorderPan
e.alignment="CENTER">          <children>             <Button mnemonicParsing="fa
lse" text="Button">                <graphic>                   <Button mnemonicP
arsing="false" text="Button" />                </graphic>             </Button>
          </children>       </HBox>    </top> </BorderPane> 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Zusammenfassung
\end_layout

\begin_layout Standard
JavaFX ist eine Java-Bibliothek.
 Sie wurde entwickelt, um eine leichtgewichtige und beschleunigte Java UI-Plattf
orm für Unternehmensanwendungen bereitzustellen.
 Seine Anwendungen werden vollständig in Java entwickelt.
 Java FX bietet einen reichhaltigen Satz an UI-Steuerelementen, Grafiken
 und Medien-APIs mit hardwarebeschleunigten Hochleistungsgrafiken und Medien-Eng
ines, um die Entwicklung visueller Anwendungen zu vereinfachen.
\end_layout

\begin_layout Section
Grundlegendes Verständnis des Gantt-Diagramms
\end_layout

\begin_layout Chapter
Zusammenfassung und Ausblick
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset listings
lstparams "language=Java,numbers=left,breaklines=true,tabsize=4,comment={[l]{//}},commentstyle={\color{purple}\ttfamily},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, const, path, public, this, any, string, Response},keywordstyle={\color{blue}\bfseries},morecomment={[s]{/*}{*/}},ndkeywords={class, export, boolean, throw, implements, import, this},ndkeywordstyle={\color{darkgray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily}"
inline false
status open

\begin_layout Plain Layout
public abstract class GanttTableView<T> extends TableView<T> {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
    private void createGanttTableView() {
\end_layout

\begin_layout Plain Layout
        // Creating columns
\end_layout

\begin_layout Plain Layout
        TableColumn<T, String> nameCol = new TableColumn<T, String>(name);
\end_layout

\begin_layout Plain Layout
        nameCol.setCellValueFactory(new PropertyValueFactory<T, String>("name"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
        TableColumn<T, LocalDate> startCol = new TableColumn<T, LocalDate>(start
);
\end_layout

\begin_layout Plain Layout
        startCol.setCellValueFactory(new PropertyValueFactory<>("startDate"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
        TableColumn<T, LocalDate> endCol = new TableColumn<T, LocalDate>(end);
\end_layout

\begin_layout Plain Layout
        endCol.setCellValueFactory(new PropertyValueFactory<T, LocalDate>("endDat
e"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
        TableColumn<T, Integer> durationCol = new TableColumn<T, Integer>(durati
on);
\end_layout

\begin_layout Plain Layout
        durationCol.setCellValueFactory(new PropertyValueFactory<T, Integer>("dur
ation"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
        TableColumn<T, model.GanttDataModelState> stateCol = new TableColumn<T,
 GanttDataModelState>(state);
\end_layout

\begin_layout Plain Layout
        stateCol.setCellValueFactory(new PropertyValueFactory<T, GanttDataModelSt
ate>("state"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
        TableColumn<T, Double> progressCol = new TableColumn<T, Double>(progress
);
\end_layout

\begin_layout Plain Layout
        progressCol.setCellValueFactory(new PropertyValueFactory<T, Double>(
\end_layout

\begin_layout Plain Layout
                "progress"));
\end_layout

\begin_layout Plain Layout
        progressCol
\end_layout

\begin_layout Plain Layout
                .setCellFactory(ProgressBarTableCell.<T>forTableColumn());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
        Callback<TableColumn<T, Double>, TableCell<T, Double>> cellFactory
 = new Callback<TableColumn<T, Double>, TableCell<T, Double>>() {
\end_layout

\begin_layout Plain Layout
            public TableCell call(TableColumn<T, Double> p) {
\end_layout

\begin_layout Plain Layout
                return new TableCell<T, Double>() {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
                    private ProgressBar pb = new ProgressBar();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
                    @Override
\end_layout

\begin_layout Plain Layout
                    public void updateItem(Double item, boolean empty) {
\end_layout

\begin_layout Plain Layout
                        if (item != null) {
\end_layout

\begin_layout Plain Layout
                            super.updateItem(item, empty);
\end_layout

\begin_layout Plain Layout
                            if (empty) {
\end_layout

\begin_layout Plain Layout
                                setText(null);
\end_layout

\begin_layout Plain Layout
                                setGraphic(null);
\end_layout

\begin_layout Plain Layout
                            } else {
\end_layout

\begin_layout Plain Layout
                                pb.setProgress(item);
\end_layout

\begin_layout Plain Layout
                                setGraphic(pb);
\end_layout

\begin_layout Plain Layout
                                pb.setStyle("-fx-accent: green");
\end_layout

\begin_layout Plain Layout
                            }
\end_layout

\begin_layout Plain Layout
                        }
\end_layout

\begin_layout Plain Layout
                    }
\end_layout

\begin_layout Plain Layout
                };
\end_layout

\begin_layout Plain Layout
            }
\end_layout

\begin_layout Plain Layout
        };
\end_layout

\begin_layout Plain Layout
        progressCol.setCellFactory(cellFactory);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
        TableColumn<T, String> infoCol = new TableColumn<T, String>(info);
\end_layout

\begin_layout Plain Layout
        infoCol.setCellValueFactory(new PropertyValueFactory<T, String>("info"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
        this.getColumns().addAll(nameCol, startCol, endCol, durationCol, stateCol,
 progressCol, infoCol);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
        // add specific columns
\end_layout

\begin_layout Plain Layout
        addSpecificColumns();
\end_layout

\begin_layout Plain Layout
    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
    public abstract void addSpecificColumns();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
    }
\end_layout

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Code 1 
\begin_inset CommandInset label
LatexCommand label
name "alg:Code-1"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{Roman}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Abbildungsverzeichnis 
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Abbildungsverzeichnis}
\end_layout

\begin_layout Plain Layout


\backslash
setcounter{page}{1}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Tabellenverzeichnis 
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Tabellenverzeichnis}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset FloatList algorithm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Programmlistings 
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Programmlistings}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset nomencl_print
LatexCommand printnomenclature
set_width "auto"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Nomenklatur 
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Nomenklatur}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "bibtex/quellen"
options "bibtex/din1505/alphadin"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Literaturverzeichnis 
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Literaturverzeichnis}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
leere Seite nach dem Titelblatt
\end_layout

\begin_layout Plain Layout
dann Aufgabenstellung
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
\noindent
Selbstständigkeitserklärung
\end_layout

\begin_layout Standard
\begin_inset VSpace 3cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
Hiermit erkläre ich, dass ich die vorliegende Arbeit zum Thema
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\family sans
\size larger
\begin_inset Quotes eld
\end_inset


\series bold
Konzeption eines JavaFX-Frameworks zur Erstellung von Gantt-Diagrammen -
 Anforderungen, Architektur und Implementierung eines Prototyps
\series default

\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
vollkommen selbstständig verfasst und keine anderen als die angegebenen
 Quellen und Hilfsmittel benutzt sowie Zitate kenntlich gemacht habe.
 Die Arbeit wurde in dieser oder ähnlicher Form noch keiner anderen Prüfungsbehö
rde vorgelegt.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
Brandenburg an der Havel, den 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1.7cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
Unterschrift 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

Dallysse Laure Djouhou Tamdjo
\backslash
selectlanguage{ngerman}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
